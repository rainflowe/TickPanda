#!/usr/bin/python -u

'''
Copyright [2017] [taurus.ai]

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
'''

import os
import os.path
import sys
import subprocess
import signal
import argparse
import code

from pid.decorator import pidfile

import logging
import threading
import rlcompleter
import pprint
import rfoo
from rfoo.utils import rconsole
import json
from kungfu.longfist.longfist_utils import _byteify as _byteify

rconsole_sock = '/shared/kungfu/socket/paged_rconsole.sock'

def setup_environment_variables():
    os.environ["KUNGFU_HOME"] = "/opt/kungfu"
    os.environ["YJJ_HOME"] = "/opt/kungfu/master"
    os.environ["KUNGFU_MAIN"] = "/opt/kungfu/master/bin/yjj"
    os.environ["BOOST_SO_LIB"] = os.environ["YJJ_HOME"] + "/lib/boost"
    os.environ["YJJ_SO_LIB"] = os.environ["YJJ_HOME"] + "/lib/yijinjing"
    os.environ["YJJ_DEP_LIB"] = os.environ["BOOST_SO_LIB"] + ":" + os.environ["YJJ_SO_LIB"]
    os.environ["PYTHONPATH"] = os.environ["YJJ_DEP_LIB"]
    os.environ["LD_LIBRARY_PATH"] = os.environ["YJJ_DEP_LIB"]
    os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-1.8.0"

class ConsoleHandler(rfoo.BaseHandler):
    """An rfoo handler that remotes a Python interpreter."""

    def __init__(self, *args, **kwargs):
        rfoo.BaseHandler.__init__(self, *args, **kwargs)
        self._namespace = self._context
        self._interpreter = rconsole.BufferedInterpreter(self._namespace)
        self._completer = rlcompleter.Completer(self._namespace)

    def complete(self, phrase, state):
        """Auto complete for remote console."""
        logging.debug('Enter, phrase=%r, state=%d.', phrase, state)
        return self._completer.complete(phrase, state)

    def runsource(self, source, filename="<input>"):
        """Variation of InteractiveConsole which returns expression 
        result as second element of returned tuple.
        """
        logging.debug('Enter, source=%r.', source)
        # Inject a global variable to capture expression result.
        self._namespace['_rcon_result_'] = None
        try:
            # In case of an expression, capture result.
            compile(source, '<input>', 'eval')
            source = '_rcon_result_ = ' + source
            logging.debug('source is an expression.')
        except SyntaxError:
            pass

        more = self._interpreter.runsource(source, filename)
        result = self._namespace.pop('_rcon_result_')
        if more is True:
            logging.debug('source is incomplete.')
            return True, ''

        output = self._interpreter.buffout
        self._interpreter.buffout = ''
        if result is not None:
            result = pprint.pformat(result)
            output += result + '\n'

        return False, output

class ProxyConsole(code.InteractiveConsole):
    """Proxy interactive console to remote interpreter."""

    def __init__(self, unix_sock):
        code.InteractiveConsole.__init__(self)
        self.conn = rfoo.UnixConnection().connect(path=unix_sock)

    def interact(self, banner=None):
        return code.InteractiveConsole.interact(self, banner)

    def complete(self, phrase, state):
        """Auto complete support for interactive console."""
        # Allow tab key to simply insert spaces when proper.
        if phrase == '':
            if state == 0:
                return '    '
            return None
        return rfoo.Proxy(self.conn).complete(phrase, state)

    def runsource(self, source, filename="<input>", symbol="single"):
        more, output = rfoo.Proxy(self.conn).runsource(source, filename)
        if output:
            self.write(output)
        return more

    def runsource_noout(self, source, filename="<input>", symbol="single"):
        more, output = rfoo.Proxy(self.conn).runsource(source, filename)
        return output

class RConsoleDaemon(object):

    def __init__(self):
        self.live = True

    def run(self):
        while self.live:
            while os.path.exists(rconsole_sock):
                os.remove(rconsole_sock)
            namespace = sys._getframe(0).f_globals
            try:
                print 'rconsole server starting'
                self.server = rfoo.UnixServer(ConsoleHandler, namespace)
                self.server.start(rconsole_sock)
                print 'rcosnole server stopped'
            except:
                print('Error occurred when running rconsole: ', sys.exc_info())

    def stop(self):
        print 'Stopping rconsole daemon...'
        self.live = False
        if self.server != None:
            self.server.stop()
        print 'Stopped rconsole daemon'

class KungFu(object):

    def __init__(self):
        parser = argparse.ArgumentParser(
            description='Kung Fu Command Tool',
            usage='''kungfu <command> [<args>]

The most commonly used kungfu commands are:
   server   Start server
   journal  Print journal contents
   status   Print paged status
   interact Get Rconsole of paged
   shell    Get python with kungfu env
   shutdown Stop paged
''')
        parser.add_argument('command', help='Subcommand to run')
        # parse_args defaults to [1:] for args, but you need to
        # exclude the rest of the args too, or validation will fail
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print 'Unrecognized command'
            parser.print_help()
            exit(1)
        # use dispatch pattern to invoke method with same name
        getattr(self, args.command)()

    @pidfile(piddir="/shared/kungfu/pid", pidname="paged")
    def server(self):
        import libpaged
        global engine, rconsoled
        engine = libpaged.PageEngine()
        namespace = sys._getframe(0).f_globals
        rconsoled = RConsoleDaemon()
        def _rconsole_wrapper():
            rconsoled.run()

        rconsole_thread = threading.Thread(name="rconsole", target=_rconsole_wrapper)
        rconsole_thread.start()
        #task_timetick = libpaged.TimeTick(engine)
        #engine.addTask(task_timetick)
        #task_statusreport = libpaged.StatusReport(engine)
        #engine.addTask(task_statusreport)
        task_temppage = libpaged.TempPage(engine)
        engine.addTask(task_temppage)
        task_control = libpaged.Controller(engine)
        task_control.set_switch_day_time('17:00:00')
        task_control.add_engine_start_time('09:15:00')
        task_control.add_engine_end_time('16:30:00')
        engine.addTask(task_control)
        engine.setFreq(seconds=0.01)
        engine.start()
        rconsole_thread.join()
        os.remove(rconsole_sock)

    def journal(self):
        os.system(os.environ["YJJ_HOME"] + "/bin/journal_tool " + ' '.join(sys.argv[2:]))

    def dump(self):
        os.system(os.environ["YJJ_HOME"] + "/bin/journal_dumper " + ' '.join(sys.argv[2:]))

    def shell(self):
        os.system("/usr/bin/python")

    def interact(self):
        try:
            console = ProxyConsole(rconsole_sock)
            import readline
            readline.set_completer(console.complete)
            readline.parse_and_bind('tab: complete')
            console.interact()
        except:
            print('Failed in interact', sys.exc_info())
            pass

    def status(self):
        try:
            console = ProxyConsole(rconsole_sock)
            print console.runsource_noout("engine.status()")
        except:
            print('Failed in status', sys.exc_info())
            pass

    def shutdown(self):
        try:
            console = ProxyConsole(rconsole_sock)
            console.runsource("engine.stop()")
            console.runsource("rconsoled.stop()")
        except:
            print('Failed in shutdown', sys.exc_info())
            pass

if __name__ == '__main__':
    if "KUNGFU_MAIN" in os.environ:
        KungFu()
    else:
        setup_environment_variables()
        proc = subprocess.Popen(sys.argv)
        def exit_term(signum, frame):
            proc.terminate()
        signal.signal(signal.SIGTERM, exit_term)
        proc.wait()
